Velvet2Consed converter programs

These codes translate the velvet AMOS output into consed-compatible ACE files. The codes here are 1-2 years old, and I've not worked on them since leaving Cincinnati Children's. You are more than welcome to use them and to alter them as needed. If need be, I can offer some insights into how the code works, but other than that these are offered as-is.

The C++ version is rather rudimentary, but may actually require the least amount of fiddling to get to work. It uses the BOOST and the AMOS libraries, so they need to be hooked in. A minor problem is the fact I do not have an actual release version of the code – I was working with the Eclipse IDE and all the autogenerated makefiles are specific to the Mac computer I was using at the time. Still, it should be relatively easy to create the makefile:

OBJS += \
src/AMOSHandler.o \
src/Contig.o \
src/DatastoreHandler.o \
src/FastaHandler.o \
src/Read.o \
src/Sequence.o \
src/Tile.o \
src/VelvetHandler.o \
src/VelvetToConsed.o 

src/AMOSHandler.o: src/AMOSHandler.cpp
	@echo 'Building file: $<'
	@echo 'Invoking: GCC C++ Compiler'
	g++ -I"./include" -I/usr/local/boost_1_39_0 -I/usr/local/amos-2.0.8/include/AMOS -O0 -g3 -Wall -c -o"$@" "$<"

#repeat above for each .o file, then link it up:

# All Target
all: Velvet2Consed

# Tool invocations
Velvet2Consed: $(OBJS) $(USER_OBJS)
	gcc -L/Developer/usr/lib/gcc/i686-apple-darwin9/4.2.1 -L/usr/local/amos-2.0.8/lib/AMOS -L/usr/local/lib -L/usr/local/boost_1_39_0/stage/lib -o "Velvet2Consed" $(OBJS) $(USER_OBJS) $(LIBS)

Running the Velvet2Consed program is straight forward, and it will spit out a help page if invoked without args.

There are two perl versions of the converter program as well. The velvetReadMatcher.pl script was my personal favorite: it loads the reads and contigs into a SQL database from which you can export and manipulate them. The velvet2ace.pl script is identical, except the SQL parts have been stripped out and replaced with a binary data store (similar to that used by the C++ version). Both programs worked quite well for CASAVA 1.5 and earlier. For CASAVA 1.6 and 1.7, the automated directory finder will need to be altered: the program looks for Firecrest/IPAR/Bustard directories, so the “drillDown” and the “findDir” subroutines will need to be altered to match either the RTA or the OLB structure. For CASAVA 1.8, the drill down routines will need to head into the aligned folders. There is a rather verbose word document explaining the use of the velvetReadMatcher script; the velvet2ace script was written on the same framework (and is also miscommented) but the basic operation is the same.


